document.addEventListener('DOMContentLoaded', function() {
    const dbType = document.getElementById('db-type');
    const dbHost = document.getElementById('db-host');
    const dbPort = document.getElementById('db-port');
    const form = document.getElementById('init-db-form');
    const statusContainer = document.querySelector('.status-container');
    const submitBtn = document.getElementById('submit-btn');
    const errorMessage = document.getElementById('error-message');

    // 数据库类型切换逻辑
    dbType.addEventListener('change', function() {
        switch(this.value) {
            case 'mysql':
                dbHost.value = 'localhost';
                dbPort.value = '3306';
                dbHost.disabled = false;
                dbPort.disabled = false;
                break;
            case 'postgresql':
                dbHost.value = 'localhost';
                dbPort.value = '5432';
                dbHost.disabled = false;
                dbPort.disabled = false;
                break;
            case 'sqlite':
                dbHost.value = ':memory:';
                dbPort.value = '';
                dbHost.disabled = true;
                dbPort.disabled = true;
                break;
            default:
                dbHost.value = '';
                dbPort.value = '';
                dbHost.disabled = false;
                dbPort.disabled = false;
        }
    });

    // 密码显示切换
    const togglePassword = document.querySelector('.toggle-password');
    const passwordInput = document.getElementById('db-password');

    togglePassword.addEventListener('click', function() {
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);
        this.querySelector('i').classList.toggle('fa-eye');
        this.querySelector('i').classList.toggle('fa-eye-slash');
    });

    // 高级设置切换
    const advancedToggle = document.querySelector('.advanced-toggle');
    const advancedSettings = document.querySelector('.advanced-settings');

    advancedToggle.addEventListener('click', function() {
        this.classList.toggle('active');
        advancedSettings.classList.toggle('show');
    });

    // 更新状态显示
    function updateStatus(step, success = true) {
        const steps = ['connecting', 'connected', 'creating-tables', 'tables-created', 'initializing-data', 'data-initialized'];
        const currentIndex = steps.indexOf(step);
        
        steps.forEach((s, index) => {
            const element = document.getElementById(s);
            if (index <= currentIndex) {
                element.style.display = 'flex';
                if (index < currentIndex && success) {
                    element.querySelector('i').className = 'fas fa-check status-success';
                }
            } else {
                element.style.display = 'none';
            }
        });
    }

    // 显示错误消息
    function showError(message) {
        errorMessage.querySelector('span').textContent = message;
        errorMessage.classList.add('show');
        setTimeout(() => {
            errorMessage.classList.remove('show');
        }, 5000);
    }

    // 表单提交处理
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // 重置状态
        statusContainer.classList.add('show');
        errorMessage.classList.remove('show');
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>初始化中...</span>';

        // 收集表单数据
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        try {
            // 连接数据库
            updateStatus('connecting');
            await new Promise(resolve => setTimeout(resolve, 1000));
            updateStatus('connected');

            // 创建表结构
            updateStatus('creating-tables');
            await new Promise(resolve => setTimeout(resolve, 1500));
            updateStatus('tables-created');

            // 初始化数据
            updateStatus('initializing-data');
            await new Promise(resolve => setTimeout(resolve, 1000));
            updateStatus('data-initialized');

            // 成功后延迟跳转
            setTimeout(() => {
                window.location.href = '/login';
            }, 1000);
        } catch (error) {
            console.error('初始化失败:', error);
            showError('数据库初始化失败，请检查配置信息是否正确');
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<i class="fas fa-check-circle"></i><span>重试初始化</span>';
        }
    });
}); 